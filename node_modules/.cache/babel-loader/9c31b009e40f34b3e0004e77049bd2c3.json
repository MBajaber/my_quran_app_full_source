{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\HTML\\\\quran_project_2\\\\quran\\\\src\\\\components\\\\audioPlayer\\\\audioPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { PlayerContent } from './audioPlayerStyled';\nimport { AiOutlinePlus, AiOutlineMinus, AiOutlineClose } from 'react-icons/ai';\nimport { FaRandom } from 'react-icons/fa';\nimport { BiPlay, BiPause } from 'react-icons/bi';\nimport { BsVolumeDown, BsVolumeMute, BsVolumeUp } from 'react-icons/bs';\nimport { CgTrashEmpty } from 'react-icons/cg';\nimport Container from 'react-bootstrap/Container';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/action/getData';\nimport Playlist from '../playlist/playlist';\nimport { AiFillHeart } from 'react-icons/ai';\nimport AudioPlayer from 'react-h5-audio-player';\nimport 'react-h5-audio-player/lib/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SongPlayer = props => {\n  _s();\n\n  const [value, setValue] = useState(1);\n  const [getDuration, setGetDuration] = useState('00');\n  const [getCurrentTime, setGetCurrentTime] = useState('00');\n  const myAudioRef = useRef();\n  const [showfavPlaylist, setShowfavPlaylist] = useState(false);\n  const favPlaylistclasses = showfavPlaylist ? ['playlist_list', 'show'] : ['playlist_list']; // const playFun = useCallback(() => {\n  //     if (myAudioRef.current.paused) {\n  //         myAudioRef.current.play().catch(error => console.log('myError'));\n  //         props.playingTrue();\n  //     }\n  //     console.log('PLay');\n  // }, []);\n  // const pauseFun = useCallback(() => {\n  //     if (!myAudioRef.current.paused) {\n  //         myAudioRef.current.pause();\n  //         props.playingFalse();\n  //     }\n  //     console.log('Pause');\n  // }, []);\n  // const toggleAudio = useCallback(() => {\n  //     console.log('*************************************************************************')\n  //     props.togglePlay();\n  //     myAudioRef.current.paused ? playFun() : pauseFun();\n  // }, [])\n  // const valueHanler = useCallback((event) => {\n  //     setValue(+event.target.value);\n  //     myAudioRef.current.volume = event.target.value;\n  // }, []);\n  // useEffect(() => {\n  //     let isMount = false;\n  //     if(!isMount) {\n  //         var au = document.getElementById(\"my-audio\");\n  //         console.log('MNMNMN');\n  //         au.onloadedmetadata = function () {\n  //             let calcDuration = Math.floor(au.duration / 60) + ':' + ('0' + Math.floor(au.duration % 60)).slice(-2)\n  //             setGetDuration(calcDuration);\n  //             let calcCurreentTime = Math.floor(au.currentTime / 60) + ':' + ('0' + Math.floor(au.currentTime % 60)).slice(-2)\n  //             setGetCurrentTime(calcCurreentTime);\n  //         };\n  //         myAudioRef.current.addEventListener('timeupdate', () => {\n  //             let curTime = myAudioRef.current.currentTime;\n  //             let calCurTime = Math.floor(curTime / 60) + ':' + ('0' + Math.floor(curTime % 60)).slice(-2)\n  //             setGetCurrentTime(calCurTime);\n  //             let progress = document.getElementById('short-progress');\n  //             let percent = (curTime / myAudioRef.current.duration) * 100;\n  //             progress.style.flexBasis = `${percent}%`;\n  //             if(myAudioRef.current.currentTime === myAudioRef.current.duration) {\n  //                 console.log('Is Completed')\n  //                 props.playingTrue();\n  //             }\n  //         });\n  //         playFun();\n  //     }\n  //     return () => {\n  //         isMount = true;\n  //         myAudioRef.current.removeEventListener('ended', () => props.playingFalse());\n  //     };\n  // }, [setGetCurrentTime, props.suraLink]);\n  // const skippedTime = useCallback((e) => {\n  //     myAudioRef.current.currentTime += +e\n  // }, []);\n  // const scrub = useCallback((e) => {\n  //     let fullProgress = document.getElementById('full-progress');\n  //     const scrubTime = (e.nativeEvent.offsetX / fullProgress.offsetWidth) * myAudioRef.current.duration;\n  //     if(e.target.className !== 'short-progress-end') {\n  //         myAudioRef.current.currentTime = scrubTime;\n  //         console.log(e.nativeEvent.offsetX);\n  //     }\n  // }, []);\n  // const randomChoice = () => {\n  //     if(props.isRandom) {\n  //         const getRandom = Math.floor(Math.random() * props.suras.length).toString()\n  //         const num = props.suras[getRandom].length === 1 ? `00${props.suras[getRandom]}` : props.suras[getRandom].length === 2 ? `0${props.suras[getRandom]}` : props.suras[getRandom];\n  //         props.suraLinkRandom(num);\n  //         let getName = props.allSurasNames[getRandom];\n  //         props.changeName(getName);\n  //         props.isFromFavouritePlaylist(false);\n  //         props.imamNameFunc(props.imamName);\n  //         console.log('{{{{{{{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}}}}}}}}}}')\n  //     }\n  // }\n  // const calcTimes = useCallback(time => {\n  //     const timeInArr = time.split(':');\n  //     const firstElement = +timeInArr[0]\n  //     let myTime = '';\n  //     if(firstElement > 59) {\n  //         let hour = firstElement/60;\n  //         let diviedMin = hour.toString().split('.');\n  //         let getMun = '0.' + diviedMin[1];\n  //         let calcMin = Math.round(getMun * 60);\n  //         myTime = `${diviedMin[0]}:${calcMin < 9 ? `0${calcMin}`:calcMin}:${timeInArr[1]}`;\n  //     } else {\n  //         let minutesInArr = time.split(':');\n  //         let firstElementInMin = +minutesInArr[0];\n  //         let caclfirstElementInMin = firstElementInMin < 9 ? `0${firstElementInMin}` : firstElementInMin;\n  //         let countFinal = getCurrentTime.split(':');\n  //         myTime = countFinal === 3 ? `00:${caclfirstElementInMin}:${minutesInArr[1]}` : `${caclfirstElementInMin}:${minutesInArr[1]}`;\n  //     }\n  //     return myTime;\n  // }, []);\n  // const fullTime = calcTimes(getDuration);\n  // const currentTimeAudio = calcTimes(getCurrentTime);\n  // const deleteItems = (item) => {\n  //     console.log(item.server);\n  //     props.deleteFavFromSurabox(item.server);\n  //     props.deleteItemFromPlaylist(item);\n  // }\n  // const cutSentance = immamName => immamName && immamName.length > 21 ? `${immamName.slice(0, 21)}...` : immamName;\n  // const toggleValue = () => {\n  //     if(value > 0.5) {\n  //         setValue(0);\n  //         myAudioRef.current.volume = 0;\n  //     } else {\n  //         setValue(1);\n  //         myAudioRef.current.volume = 1;\n  //     }\n  // }\n\n  const clickedPlaylist = (link, number, suraName, imamName) => {\n    props.playingFalse();\n    props.suraLinkFunc(link);\n    props.getSurah_Number_Name(number, suraName);\n    props.showPlayer();\n    props.imamNameFunc(imamName);\n    props.isFromFavouritePlaylist(true);\n    props.favouritePlaylistImmamName(imamName);\n    props.emptySuras();\n  };\n\n  console.log('SONG Player');\n  return /*#__PURE__*/_jsxDEV(PlayerContent, {\n    suras: props.suras,\n    theme: props.theme,\n    themeStyle: props.themeStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"random\",\n      children: /*#__PURE__*/_jsxDEV(FaRandom, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AudioPlayer, {\n      autoPlay: true,\n      src: props.suraLink\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this); // =============================================================================\n  // return (\n  //     <PlayerContent suras={props.suras} theme={props.theme} themeStyle={props.themeStyle}>\n  //         <Container>\n  //             <div className='player_content'>\n  //                 <div className='icons_controls_audio'>\n  //                     <ul className='mb-0 justify-content-center'>\n  //                         <li onClick={randomChoice} className='mr-2 ml-3 mr-sm-2 ml-sm-2'>\n  //                             <button className={props.suras.length === 0 ? 'disabled' : null} disabled={props.suras.length === 0 ? true : false}>\n  //                                 {<FaRandom size={14} />}\n  //                             </button>\n  //                         </li>\n  //                         <li onClick={(e) => skippedTime('-10')} className='mr-2 ml-3 mr-sm-2 ml-sm-2'>\n  //                             <button>\n  //                                 {<AiOutlineMinus size={20} />}\n  //                             </button>\n  //                         </li>\n  //                         <li onClick={toggleAudio} className='main-btn mr-2 ml-3 mr-sm-2 ml-sm-2'>\n  //                             <button>\n  //                                 {props.isPlaying ? <BiPause size={30} /> : <BiPlay size={30} style={{ paddingLeft: '3px' }} />}\n  //                             </button>\n  //                             </li>\n  //                         <li onClick={(e) => skippedTime('+10')} className='mr-2 ml-3 mr-sm-2 ml-sm-2'>\n  //                             <button>\n  //                                 {<AiOutlinePlus size={20} />}\n  //                             </button>\n  //                         </li>\n  //                     </ul>\n  //                 </div>\n  //                 <div className='progress_valume pl-2 pr-0 pr-md-2'>\n  //                     <div className='progress_bar_controls'>\n  //                         <span className='current-time'>{currentTimeAudio}</span>\n  //                         <div className='full-progress' id='full-progress' onClick={(e) => scrub(e)}>\n  //                             <audio id='my-audio' ref={myAudioRef} src={props.suraLink} preload=\"metadata\" />\n  //                             <div className='short-progress' id='short-progress'>\n  //                                 <span className='short-progress-end' onClick={(e) => scrub(e)}></span>\n  //                             </div>\n  //                         </div>\n  //                         <span className='full-time'>{fullTime}</span>\n  //                     </div>\n  //                     <div className='playlist_items d-none d-md-block'>\n  //                         <AiFillHeart size={25} onClick={() => setShowfavPlaylist(!showfavPlaylist)} />\n  //                         <div className={favPlaylistclasses.join(' ')}>\n  //                             <div className='header d-flex-align-items-center'>\n  //                                 <AiOutlineClose size={20} onClick={() => setShowfavPlaylist(!showfavPlaylist)} />\n  //                             </div>\n  //                             <ul className='list-unstyled sura_list'>\n  //                                 {\n  //                                 props.playlist && props.playlist.length > 0 \n  //                                 ?  props.playlist.map((e, i) => (\n  //                                     <Playlist\n  //                                         key={e.server}\n  //                                         server={e.server}\n  //                                         number={e.number}\n  //                                         name={e.name}\n  //                                         rewaya={e.rewaya}\n  //                                         index={i}\n  //                                         suraName={e.suraName}\n  //                                         deleteItem={(item) => deleteItems(item)}\n  //                                         clicked={(link, number, suraName, name) => clickedPlaylist(link, number, suraName, name)}\n  //                                     />\n  //                                 ))\n  //                                 : <div className='no_list text-center text-capitalize'>{props.site_language.no_playlist_added} <CgTrashEmpty size={26} /></div>\n  //                                 }\n  //                             </ul>\n  //                         </div>\n  //                     </div>\n  //                     <div className='volume-controll ml-1'>\n  //                         <span className='volume-icon' title={`${value * 100}%`} onClick={toggleValue}>\n  //                             {value > 0.70 && (<>\n  //                                 <BsVolumeUp size={27} />\n  //                             </>)}\n  //                             {value <= 0.70 && value > 0.01 && (<>\n  //                                 <BsVolumeDown size={27} />\n  //                             </>)}\n  //                             {value == 0.00 && (<>\n  //                                 <BsVolumeMute size={27} />\n  //                             </>)}\n  //                         </span>\n  //                         <div className='player-slider-parent'>\n  //                             <input type='range' name='value' min='0' max='1' value={value} onChange={(e) => valueHanler(e)} step='.05' title={`${value * 100}%`} className='player-slider' />\n  //                         </div>\n  //                     </div>\n  //                 </div>\n  //                 <div className='sura_description text-center d-none d-md-block' title={props.isFavPlaylist ? props.playlistImamName : props.imamNameBeforeUpdate}>\n  //                     <h6 className='text-capitalize mb-0 play_item_name'>{props.isFavPlaylist ? cutSentance(props.playlistImamName) : cutSentance(props.imamNameBeforeUpdate)}</h6>\n  //                     <span className='text-capitalize play_item_sura'>{props.suraName}</span>\n  //                 </div>\n  //             </div>\n  //         </Container>\n  //     </PlayerContent>\n  // )\n};\n\n_s(SongPlayer, \"TfJCXri9oGGTiaBCIqCKvgoyXDQ=\");\n\n_c = SongPlayer;\n\nconst mapStateToProps = state => {\n  return {\n    imamName: state.getData === null ? '' : state.getData.name,\n    suraName: state.suraName,\n    suraLink: state.suraLink,\n    isPlaying: state.isPlaying,\n    suras: state.suras,\n    allSurasNames: state.allSurasNames,\n    isImamPage: state.isImamPage,\n    imamNameBeforeUpdate: state.imamNameBeforeUpdate,\n    isRandom: state.isRandom,\n    playlist: state.playlist,\n    isFavPlaylist: state.isFavPlaylist,\n    playlistImamName: state.playlistImamName,\n    theme: state.theme,\n    themeStyle: state.themeStyle,\n    site_language: state.site_language\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  togglePlay: () => dispatch(actions.playingToggle()),\n  playingFalse: () => dispatch(actions.playingFalse()),\n  playingTrue: () => dispatch(actions.playingTrue()),\n  suraLinkRandom: data => dispatch(actions.suraLinkRandom(data)),\n  changeName: name => dispatch(actions.changeName(name)),\n  imamNameFunc: name => dispatch(actions.getImamNameBeforeUpdate(name)),\n  deleteItemFromPlaylist: item => dispatch(actions.removeItemFromPlayList(item)),\n  deleteFavFromSurabox: item => dispatch(actions.deleteFavFromSurabox(item)),\n  showPlayer: () => dispatch(actions.showPlayer()),\n  suraLinkFunc: link => dispatch(actions.suraLink(link)),\n  getSurah_Number_Name: (number, suraName) => dispatch(actions.getSurah_Number_Name(number, suraName)),\n  isFromFavouritePlaylist: bool => dispatch(actions.isFromFavouritePlaylist(bool)),\n  favouritePlaylistImmamName: name => dispatch(actions.favouritePlaylistImmamName(name)),\n  emptySuras: () => dispatch(actions.emptySuras())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SongPlayer);\n\nvar _c;\n\n$RefreshReg$(_c, \"SongPlayer\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/HTML/quran_project_2/quran/src/components/audioPlayer/audioPlayer.js"],"names":["React","useState","useRef","useEffect","useCallback","PlayerContent","AiOutlinePlus","AiOutlineMinus","AiOutlineClose","FaRandom","BiPlay","BiPause","BsVolumeDown","BsVolumeMute","BsVolumeUp","CgTrashEmpty","Container","connect","actions","Playlist","AiFillHeart","AudioPlayer","SongPlayer","props","value","setValue","getDuration","setGetDuration","getCurrentTime","setGetCurrentTime","myAudioRef","showfavPlaylist","setShowfavPlaylist","favPlaylistclasses","clickedPlaylist","link","number","suraName","imamName","playingFalse","suraLinkFunc","getSurah_Number_Name","showPlayer","imamNameFunc","isFromFavouritePlaylist","favouritePlaylistImmamName","emptySuras","console","log","suras","theme","themeStyle","suraLink","mapStateToProps","state","getData","name","isPlaying","allSurasNames","isImamPage","imamNameBeforeUpdate","isRandom","playlist","isFavPlaylist","playlistImamName","site_language","mapDispatchToProps","dispatch","togglePlay","playingToggle","playingTrue","suraLinkRandom","data","changeName","getImamNameBeforeUpdate","deleteItemFromPlaylist","item","removeItemFromPlayList","deleteFavFromSurabox","bool"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport { PlayerContent } from './audioPlayerStyled';\r\nimport { AiOutlinePlus, AiOutlineMinus, AiOutlineClose } from 'react-icons/ai';\r\nimport { FaRandom } from 'react-icons/fa';\r\nimport { BiPlay, BiPause } from 'react-icons/bi';\r\nimport { BsVolumeDown, BsVolumeMute, BsVolumeUp } from 'react-icons/bs';\r\nimport { CgTrashEmpty } from 'react-icons/cg';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/action/getData';\r\nimport Playlist from '../playlist/playlist';\r\nimport { AiFillHeart } from 'react-icons/ai';\r\n\r\nimport AudioPlayer from 'react-h5-audio-player';\r\nimport 'react-h5-audio-player/lib/styles.css';\r\n\r\n\r\nconst SongPlayer = props => {\r\n    const [value, setValue] = useState(1);\r\n    const [getDuration, setGetDuration] = useState('00');\r\n    const [getCurrentTime, setGetCurrentTime] = useState('00');\r\n    const myAudioRef = useRef();\r\n    const [showfavPlaylist, setShowfavPlaylist] = useState(false);\r\n    const favPlaylistclasses = showfavPlaylist ? ['playlist_list', 'show'] : ['playlist_list'];\r\n\r\n\r\n    // const playFun = useCallback(() => {\r\n    //     if (myAudioRef.current.paused) {\r\n    //         myAudioRef.current.play().catch(error => console.log('myError'));\r\n    //         props.playingTrue();\r\n    //     }\r\n    //     console.log('PLay');\r\n    // }, []);\r\n\r\n    // const pauseFun = useCallback(() => {\r\n    //     if (!myAudioRef.current.paused) {\r\n    //         myAudioRef.current.pause();\r\n    //         props.playingFalse();\r\n    //     }\r\n\r\n    //     console.log('Pause');\r\n    // }, []);\r\n\r\n    // const toggleAudio = useCallback(() => {\r\n    //     console.log('*************************************************************************')\r\n    //     props.togglePlay();\r\n    //     myAudioRef.current.paused ? playFun() : pauseFun();\r\n    // }, [])\r\n\r\n    // const valueHanler = useCallback((event) => {\r\n    //     setValue(+event.target.value);\r\n    //     myAudioRef.current.volume = event.target.value;\r\n    // }, []);\r\n\r\n    // useEffect(() => {\r\n    //     let isMount = false;\r\n    //     if(!isMount) {\r\n    //         var au = document.getElementById(\"my-audio\");\r\n    //         console.log('MNMNMN');\r\n    //         au.onloadedmetadata = function () {\r\n    //             let calcDuration = Math.floor(au.duration / 60) + ':' + ('0' + Math.floor(au.duration % 60)).slice(-2)\r\n    //             setGetDuration(calcDuration);\r\n    //             let calcCurreentTime = Math.floor(au.currentTime / 60) + ':' + ('0' + Math.floor(au.currentTime % 60)).slice(-2)\r\n    //             setGetCurrentTime(calcCurreentTime);\r\n    //         };\r\n\r\n    //         myAudioRef.current.addEventListener('timeupdate', () => {\r\n    //             let curTime = myAudioRef.current.currentTime;\r\n\r\n    //             let calCurTime = Math.floor(curTime / 60) + ':' + ('0' + Math.floor(curTime % 60)).slice(-2)\r\n    //             setGetCurrentTime(calCurTime);\r\n\r\n    //             let progress = document.getElementById('short-progress');\r\n    //             let percent = (curTime / myAudioRef.current.duration) * 100;\r\n    //             progress.style.flexBasis = `${percent}%`;\r\n\r\n    //             if(myAudioRef.current.currentTime === myAudioRef.current.duration) {\r\n    //                 console.log('Is Completed')\r\n    //                 props.playingTrue();\r\n    //             }\r\n    //         });\r\n\r\n    //         playFun();\r\n    //     }\r\n\r\n    //     return () => {\r\n    //         isMount = true;\r\n    //         myAudioRef.current.removeEventListener('ended', () => props.playingFalse());\r\n    //     };\r\n\r\n    // }, [setGetCurrentTime, props.suraLink]);\r\n\r\n    // const skippedTime = useCallback((e) => {\r\n    //     myAudioRef.current.currentTime += +e\r\n    // }, []);\r\n\r\n    // const scrub = useCallback((e) => {\r\n    //     let fullProgress = document.getElementById('full-progress');\r\n    //     const scrubTime = (e.nativeEvent.offsetX / fullProgress.offsetWidth) * myAudioRef.current.duration;\r\n    //     if(e.target.className !== 'short-progress-end') {\r\n    //         myAudioRef.current.currentTime = scrubTime;\r\n    //         console.log(e.nativeEvent.offsetX);\r\n    //     }\r\n    // }, []);\r\n\r\n    // const randomChoice = () => {\r\n    //     if(props.isRandom) {\r\n    //         const getRandom = Math.floor(Math.random() * props.suras.length).toString()\r\n    //         const num = props.suras[getRandom].length === 1 ? `00${props.suras[getRandom]}` : props.suras[getRandom].length === 2 ? `0${props.suras[getRandom]}` : props.suras[getRandom];\r\n    //         props.suraLinkRandom(num);\r\n    //         let getName = props.allSurasNames[getRandom];\r\n    //         props.changeName(getName);\r\n    //         props.isFromFavouritePlaylist(false);\r\n    //         props.imamNameFunc(props.imamName);\r\n    //         console.log('{{{{{{{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}}}}}}}}}}')\r\n    //     }\r\n    // }\r\n\r\n    // const calcTimes = useCallback(time => {\r\n    //     const timeInArr = time.split(':');\r\n    //     const firstElement = +timeInArr[0]\r\n    //     let myTime = '';\r\n    //     if(firstElement > 59) {\r\n    //         let hour = firstElement/60;\r\n    //         let diviedMin = hour.toString().split('.');\r\n    //         let getMun = '0.' + diviedMin[1];\r\n    //         let calcMin = Math.round(getMun * 60);\r\n    //         myTime = `${diviedMin[0]}:${calcMin < 9 ? `0${calcMin}`:calcMin}:${timeInArr[1]}`;\r\n    //     } else {\r\n    //         let minutesInArr = time.split(':');\r\n    //         let firstElementInMin = +minutesInArr[0];\r\n    //         let caclfirstElementInMin = firstElementInMin < 9 ? `0${firstElementInMin}` : firstElementInMin;\r\n    //         let countFinal = getCurrentTime.split(':');\r\n    //         myTime = countFinal === 3 ? `00:${caclfirstElementInMin}:${minutesInArr[1]}` : `${caclfirstElementInMin}:${minutesInArr[1]}`;\r\n    //     }\r\n    //     return myTime;\r\n    // }, []);\r\n\r\n    // const fullTime = calcTimes(getDuration);\r\n    // const currentTimeAudio = calcTimes(getCurrentTime);\r\n\r\n    // const deleteItems = (item) => {\r\n    //     console.log(item.server);\r\n    //     props.deleteFavFromSurabox(item.server);\r\n    //     props.deleteItemFromPlaylist(item);\r\n    // }\r\n\r\n    // const cutSentance = immamName => immamName && immamName.length > 21 ? `${immamName.slice(0, 21)}...` : immamName;\r\n\r\n    // const toggleValue = () => {\r\n    //     if(value > 0.5) {\r\n    //         setValue(0);\r\n    //         myAudioRef.current.volume = 0;\r\n    //     } else {\r\n    //         setValue(1);\r\n    //         myAudioRef.current.volume = 1;\r\n    //     }\r\n    // }\r\n\r\n    const clickedPlaylist = (link, number, suraName, imamName) => {\r\n        props.playingFalse();\r\n        props.suraLinkFunc(link);\r\n        props.getSurah_Number_Name(number, suraName);\r\n        props.showPlayer();\r\n        props.imamNameFunc(imamName);\r\n        props.isFromFavouritePlaylist(true);\r\n        props.favouritePlaylistImmamName(imamName);\r\n        props.emptySuras();\r\n    }\r\n\r\n    console.log('SONG Player')\r\n\r\n    return (\r\n        <PlayerContent suras={props.suras} theme={props.theme} themeStyle={props.themeStyle}>\r\n            <div className='random'>\r\n                <FaRandom />\r\n            </div>\r\n            <AudioPlayer \r\n                autoPlay\r\n                src={props.suraLink}\r\n            />\r\n            <Container></Container>\r\n        </PlayerContent>\r\n    );\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // =============================================================================\r\n    // return (\r\n    //     <PlayerContent suras={props.suras} theme={props.theme} themeStyle={props.themeStyle}>\r\n    //         <Container>\r\n    //             <div className='player_content'>\r\n    //                 <div className='icons_controls_audio'>\r\n    //                     <ul className='mb-0 justify-content-center'>\r\n    //                         <li onClick={randomChoice} className='mr-2 ml-3 mr-sm-2 ml-sm-2'>\r\n    //                             <button className={props.suras.length === 0 ? 'disabled' : null} disabled={props.suras.length === 0 ? true : false}>\r\n    //                                 {<FaRandom size={14} />}\r\n    //                             </button>\r\n    //                         </li>\r\n    //                         <li onClick={(e) => skippedTime('-10')} className='mr-2 ml-3 mr-sm-2 ml-sm-2'>\r\n    //                             <button>\r\n    //                                 {<AiOutlineMinus size={20} />}\r\n    //                             </button>\r\n    //                         </li>\r\n    //                         <li onClick={toggleAudio} className='main-btn mr-2 ml-3 mr-sm-2 ml-sm-2'>\r\n    //                             <button>\r\n    //                                 {props.isPlaying ? <BiPause size={30} /> : <BiPlay size={30} style={{ paddingLeft: '3px' }} />}\r\n    //                             </button>\r\n    //                             </li>\r\n    //                         <li onClick={(e) => skippedTime('+10')} className='mr-2 ml-3 mr-sm-2 ml-sm-2'>\r\n    //                             <button>\r\n    //                                 {<AiOutlinePlus size={20} />}\r\n    //                             </button>\r\n    //                         </li>\r\n    //                     </ul>\r\n    //                 </div>\r\n    //                 <div className='progress_valume pl-2 pr-0 pr-md-2'>\r\n    //                     <div className='progress_bar_controls'>\r\n    //                         <span className='current-time'>{currentTimeAudio}</span>\r\n    //                         <div className='full-progress' id='full-progress' onClick={(e) => scrub(e)}>\r\n    //                             <audio id='my-audio' ref={myAudioRef} src={props.suraLink} preload=\"metadata\" />\r\n    //                             <div className='short-progress' id='short-progress'>\r\n    //                                 <span className='short-progress-end' onClick={(e) => scrub(e)}></span>\r\n    //                             </div>\r\n    //                         </div>\r\n    //                         <span className='full-time'>{fullTime}</span>\r\n    //                     </div>\r\n    //                     <div className='playlist_items d-none d-md-block'>\r\n    //                         <AiFillHeart size={25} onClick={() => setShowfavPlaylist(!showfavPlaylist)} />\r\n    //                         <div className={favPlaylistclasses.join(' ')}>\r\n    //                             <div className='header d-flex-align-items-center'>\r\n    //                                 <AiOutlineClose size={20} onClick={() => setShowfavPlaylist(!showfavPlaylist)} />\r\n    //                             </div>\r\n    //                             <ul className='list-unstyled sura_list'>\r\n    //                                 {\r\n    //                                 props.playlist && props.playlist.length > 0 \r\n    //                                 ?  props.playlist.map((e, i) => (\r\n    //                                     <Playlist\r\n    //                                         key={e.server}\r\n    //                                         server={e.server}\r\n    //                                         number={e.number}\r\n    //                                         name={e.name}\r\n    //                                         rewaya={e.rewaya}\r\n    //                                         index={i}\r\n    //                                         suraName={e.suraName}\r\n    //                                         deleteItem={(item) => deleteItems(item)}\r\n    //                                         clicked={(link, number, suraName, name) => clickedPlaylist(link, number, suraName, name)}\r\n    //                                     />\r\n    //                                 ))\r\n    //                                 : <div className='no_list text-center text-capitalize'>{props.site_language.no_playlist_added} <CgTrashEmpty size={26} /></div>\r\n    //                                 }\r\n    //                             </ul>\r\n    //                         </div>\r\n    //                     </div>\r\n    //                     <div className='volume-controll ml-1'>\r\n    //                         <span className='volume-icon' title={`${value * 100}%`} onClick={toggleValue}>\r\n    //                             {value > 0.70 && (<>\r\n    //                                 <BsVolumeUp size={27} />\r\n    //                             </>)}\r\n    //                             {value <= 0.70 && value > 0.01 && (<>\r\n    //                                 <BsVolumeDown size={27} />\r\n    //                             </>)}\r\n    //                             {value == 0.00 && (<>\r\n    //                                 <BsVolumeMute size={27} />\r\n    //                             </>)}\r\n    //                         </span>\r\n    //                         <div className='player-slider-parent'>\r\n    //                             <input type='range' name='value' min='0' max='1' value={value} onChange={(e) => valueHanler(e)} step='.05' title={`${value * 100}%`} className='player-slider' />\r\n    //                         </div>\r\n    //                     </div>\r\n    //                 </div>\r\n    //                 <div className='sura_description text-center d-none d-md-block' title={props.isFavPlaylist ? props.playlistImamName : props.imamNameBeforeUpdate}>\r\n    //                     <h6 className='text-capitalize mb-0 play_item_name'>{props.isFavPlaylist ? cutSentance(props.playlistImamName) : cutSentance(props.imamNameBeforeUpdate)}</h6>\r\n    //                     <span className='text-capitalize play_item_sura'>{props.suraName}</span>\r\n    //                 </div>\r\n    //             </div>\r\n    //         </Container>\r\n    //     </PlayerContent>\r\n    // )\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        imamName: state.getData === null ? '' : state.getData.name,\r\n        suraName: state.suraName,\r\n        suraLink: state.suraLink,\r\n        isPlaying: state.isPlaying,\r\n        suras: state.suras,\r\n        allSurasNames: state.allSurasNames,\r\n        isImamPage: state.isImamPage,\r\n        imamNameBeforeUpdate: state.imamNameBeforeUpdate,\r\n        isRandom: state.isRandom,\r\n        playlist: state.playlist,\r\n        isFavPlaylist: state.isFavPlaylist,\r\n        playlistImamName: state.playlistImamName,\r\n        theme: state.theme,\r\n        themeStyle: state.themeStyle,\r\n        site_language: state.site_language\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    togglePlay: () => dispatch(actions.playingToggle()),\r\n    playingFalse: () => dispatch(actions.playingFalse()),\r\n    playingTrue: () => dispatch(actions.playingTrue()),\r\n    suraLinkRandom: (data) => dispatch(actions.suraLinkRandom(data)),\r\n    changeName: (name) => dispatch(actions.changeName(name)),\r\n    imamNameFunc: (name) => dispatch(actions.getImamNameBeforeUpdate(name)),\r\n    deleteItemFromPlaylist: (item) => dispatch(actions.removeItemFromPlayList(item)),\r\n    deleteFavFromSurabox: (item) => dispatch(actions.deleteFavFromSurabox(item)),\r\n    showPlayer: () => dispatch(actions.showPlayer()),\r\n    suraLinkFunc: (link) => dispatch(actions.suraLink(link)),\r\n    getSurah_Number_Name: (number, suraName) => dispatch(actions.getSurah_Number_Name(number, suraName)),\r\n    isFromFavouritePlaylist: (bool) => dispatch(actions.isFromFavouritePlaylist(bool)),\r\n    favouritePlaylistImmamName: (name) => dispatch(actions.favouritePlaylistImmamName(name)),\r\n    emptySuras: () => dispatch(actions.emptySuras())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SongPlayer);"]},"metadata":{},"sourceType":"module"}